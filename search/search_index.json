{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"wg-access-server","text":"<p>wg-access-server is a single binary file that contains a WireGuard VPN server and a web user interface for device management. We support user authentication, 1-click device enrollment that works with macOS, Linux, Windows, iOS/iPadOS and Android including QR codes. Furthermore, you can choose from different network isolation modes for a better control over connected devices. Generally speaking you can customize the project to your use-case with relative ease.</p> <p>This project aims to provide a simple VPN solution for developers, homelab enthusiasts, and anyone else who is adventurous.</p> <p>This is a fork of the original work of place1, maintained by Freifunk Munich. Since the upstream is currently unmaintained, we try to add new features and keep the project up to date and in a working state.</p> <p>This fork supports IPv6. The VPN can run in dual-stack, IPv6-only or IPv4-only mode. NAT can be disabled separately for IPv4 and IPv6.</p> <p>Contributions are always welcome so that we can offer new bug fixes, features and improvements to the users of this project.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Pluggable authentication using OpenID Connect</li> <li>Authentication using GitLab</li> <li>PostgreSQL, MySQL or SQLite3 storage backend</li> <li>WireGuard client configuration QR codes</li> <li>IPv6 support in tunnel</li> <li>Caching DNS proxy (stub resolver)</li> <li>Client isolation (optional)</li> <li>WireGuard kernel module for improved performance and latency</li> <li>Automatic fallback to embedded userspace implementation for easy container deployment</li> <li>Dark Mode and Light Mode for user preference</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>See our documentation website</p> <p>Quick Links:</p> <ul> <li>Configuration Overview</li> <li>Deploy With Docker</li> <li>Deploy With Docker-Compose</li> <li>Deploy With Helm</li> </ul>"},{"location":"#running-with-docker","title":"Running with Docker","text":"<p>Here is a quick command to start the wg-access-server for the first time and try it out.</p> <pre><code>export WG_ADMIN_PASSWORD=$(tr -cd '[:alnum:]' &lt; /dev/urandom | fold -w30 | head -n1)\nexport WG_WIREGUARD_PRIVATE_KEY=\"$(wg genkey)\"\necho \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD\"\n\ndocker run \\\n  -it \\\n  --rm \\\n  --cap-add NET_ADMIN \\\n  --cap-add SYS_MODULE \\\n  --device /dev/net/tun:/dev/net/tun \\\n  --sysctl net.ipv6.conf.all.disable_ipv6=0 \\\n  --sysctl net.ipv6.conf.all.forwarding=1 \\\n  -v wg-access-server-data:/data \\\n  -v /lib/modules:/lib/modules:ro \\\n  -e \"WG_ADMIN_PASSWORD=$WG_ADMIN_PASSWORD\" \\\n  -e \"WG_WIREGUARD_PRIVATE_KEY=$WG_WIREGUARD_PRIVATE_KEY\" \\\n  -p 8443:8443/tcp \\\n  -p 51820:51820/udp \\\n  ghcr.io/freifunkmuc/wg-access-server:latest\n</code></pre> <p>Note: This command includes the <code>SYS_MODULE</code> capability which essentially gives the container root privileges over the host system and an attacker could easily break out of the container. See the Docker instructions for the recommended way to run the container.</p> <p>If the wg-access-server is accessible via LAN or a network you are in, you can directly connect your phone to the VPN. You have to call the webfrontent of the project for this. Normally, this is done via the IP address of the device or server on which the wg-access-server is running followed by the standard port 8443, via which the web interface can be reached. For most deployments something like this should work: https://192.168.0.XX:8443</p> <p>If the project is running locally on the computer, you can easily connect to the web interface by connecting to https://localhost:8443 in the browser.</p>"},{"location":"#running-with-docker-compose","title":"Running with Docker-Compose","text":"<p>Please also read the Docker instructions for general information regarding Docker deployments.</p> <p>Download the the docker-compose.yml file from the repo and run the following command.</p> <pre><code>export WG_ADMIN_PASSWORD=$(tr -cd '[:alnum:]' &lt; /dev/urandom | fold -w30 | head -n1)\nexport WG_WIREGUARD_PRIVATE_KEY=\"$(wg genkey)\"\necho \"Your automatically generated admin password for the wg-access-server's web interface: $WG_ADMIN_PASSWORD\"\n\ndocker-compose up\n</code></pre> <p>You can connect to the web server on the local machine browser at https://localhost:8443</p> <p>If you open your browser to your machine's LAN IP address you'll be able to connect your phone using the UI and QR code!</p>"},{"location":"#running-on-kubernetes-via-helm","title":"Running on Kubernetes via Helm","text":"<p>The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"#changelog","title":"Changelog","text":"<p>See the Releases section</p>"},{"location":"#development","title":"Development","text":"<p>The software consists of a Golang server and a React app.</p> <p>If you want to make changes to the project locally, you can do so relatively easily with the following steps.</p> <ol> <li>Run <code>cd website &amp;&amp; npm install &amp;&amp; npm start</code> to get the frontend running on <code>:3000</code>.</li> <li>Run <code>sudo go run ./main.go serve</code> to get the server running on http: <code>:8000</code> and https: <code>:8443</code>.</li> </ol> <p>Here are some notes on development configuration:</p> <ul> <li>sudo is required because the server uses iptables/ip to configure the VPN network</li> <li>access to the website is on <code>:3000</code> and API requests are redirected to <code>:8000</code> thanks to webpack</li> <li>in-memory storage and generated WireGuard keys are used</li> </ul>"},{"location":"#grpc-code-generation","title":"gRPC code generation:","text":"<p>The client communicates with the server via gRPC web. You can edit the API specification in <code>./proto/*.proto</code>.</p> <p>After changing a service or message definition, you must regenerate the server and client code:</p> <pre><code>./codegen.sh\ncd website &amp;&amp; npm run codegen\n</code></pre> <p>Or use the Dockerfile at <code>proto/Dockerfile</code>:</p> <pre><code>docker build -f proto/Dockerfile --target proto-js -t wg-access-server-proto:js .\ndocker build -f proto/Dockerfile --target proto-go -t wg-access-server-proto:go .\ndocker run --rm -v `pwd`/proto:/proto -v `pwd`/website/src/sdk:/code/src/sdk wg-access-server-proto:js\ndocker run --rm -v `pwd`/proto:/code/proto wg-access-server-proto:go\n</code></pre>"},{"location":"2-configuration/","title":"Configuration","text":"<p>You can configure wg-access-server using environment variables, cli flags or a config file taking precedence over one another in that order.</p> <p>The default configuration should work out of the box if you're just looking to try it out.</p> <p>The only required configuration is a wireguard private key. You can generate a wireguard private key by following the official docs.</p> <p>TLDR:</p> <pre><code>wg genkey\n</code></pre> <p>The config file format is <code>yaml</code> and an example is provided below.</p> <p>The format for specifying multiple values for options that allow it is: * as commandline flags:   * repeat the flag (e.g. <code>--dns-upstream 2001:db8::1 --dns-upstream 192.0.2.1</code>)   * separate the values with a comma (e.g. <code>--dns-upstream 2001:db8::1,192.0.2.1</code>) * as environment variables:   * separate with a comma (e.g. <code>WG_DNS_UPSTREAM=\"2001:db8::1,192.0.2.1\"</code>)   * separate with a new line char (e.g. <code>WG_DNS_UPSTREAM=$'2001:db8::1\\n192.0.2.1'</code>) * in the config file as YAML list.</p> <p>Here's what you can configure:</p> Environment Variable CLI Flag Config File Path Required Default (docker) Description <code>WG_CONFIG</code> <code>--config</code> The path to a wg-access-server config.yaml file <code>WG_LOG_LEVEL</code> <code>--log-level</code> <code>loglevel</code> <code>info</code> The global log level <code>WG_ADMIN_USERNAME</code> <code>--admin-username</code> <code>adminUsername</code> The admin account username <code>WG_ADMIN_PASSWORD</code> <code>--admin-password</code> <code>adminPassword</code> Yes The admin account password <code>WG_PORT</code> <code>--port</code> <code>port</code> <code>8000</code> The port the web ui will listen on (http) <code>WG_EXTERNAL_HOST</code> <code>--external-host</code> <code>externalHost</code> The external domain for the server (e.g. www.mydomain.com) <code>WG_STORAGE</code> <code>--storage</code> <code>storage</code> <code>sqlite3:///data/db.sqlite3</code> A storage backend connection string. See storage docs <code>WG_DISABLE_METADATA</code> <code>--disable-metadata</code> <code>disableMetadata</code> <code>false</code> Turn off collection of device metadata logging. Includes last handshake time and RX/TX bytes only. <code>WG_ENABLE_INACTIVE_DEVICE_DELETION</code> <code>--enable-inactive-device-deletion</code> <code>enableInactiveDeviceDeletion</code> <code>false</code> Enable/Disable the automatic deletion of inactive devices. <code>WG_INACTIVE_DEVICE_GRACE_PERIOD</code> <code>--inactive-device-grace-period</code> <code>inactiveDeviceGracePeriod</code> <code>8760h</code> (1 Year) The duration after which inactive devices are automatically deleted, if automatic deletion is enabled. A device is inactive if it has not been connected to the server for longer than the inactive device grace period. The duration format is the go duration string format <code>WG_FILENAME</code> <code>--filename</code> <code>filename</code> <code>WireGuard</code> Change the name of the configuration file the user can download (Do not include the '.conf' extension ) <code>WG_WIREGUARD_ENABLED</code> <code>--[no-]wireguard-enabled</code> <code>wireguard.enabled</code> <code>true</code> Enable/disable the wireguard server. Useful for development on non-linux machines. <code>WG_WIREGUARD_INTERFACE</code> <code>--wireguard-interface</code> <code>wireguard.interface</code> <code>wg0</code> The wireguard network interface name <code>WG_WIREGUARD_PRIVATE_KEY</code> <code>--wireguard-private-key</code> <code>wireguard.privateKey</code> Yes The wireguard private key. This value is required and must be stable. If this value changes all devices must re-register. <code>WG_WIREGUARD_PORT</code> <code>--wireguard-port</code> <code>wireguard.port</code> <code>51820</code> The wireguard server port (udp) <code>WG_WIREGUARD_MTU</code> <code>--wireguard-mtu</code> <code>wireguard.mtu</code> <code>1420</code> The maximum transmission unit (MTU) to be used on the server-side interface. <code>WG_VPN_CIDR</code> <code>--vpn-cidr</code> <code>vpn.cidr</code> <code>10.44.0.0/24</code> The VPN IPv4 network range. VPN clients will be assigned IP addresses in this range. Set to <code>0</code> to disable IPv4. <code>WG_IPV4_NAT_ENABLED</code> <code>--vpn-nat44-enabled</code> <code>vpn.nat44</code> <code>true</code> Disables NAT for IPv4 <code>WG_IPV6_NAT_ENABLED</code> <code>--vpn-nat66-enabled</code> <code>vpn.nat66</code> <code>true</code> Disables NAT for IPv6 <code>WG_VPN_CLIENT_ISOLATION</code> <code>--vpn-client-isolation</code> <code>vpn.clientIsolation</code> <code>false</code> BLock or allow traffic between client devices (client isolation) <code>WG_VPN_CIDRV6</code> <code>--vpn-cidrv6</code> <code>vpn.cidrv6</code> <code>fd48:4c4:7aa9::/64</code> The VPN IPv6 network range. VPN clients will be assigned IP addresses in this range. Set to <code>0</code> to disable IPv6. <code>WG_VPN_GATEWAY_INTERFACE</code> <code>--vpn-gateway-interface</code> <code>vpn.gatewayInterface</code> default gateway interface (e.g. eth0) The VPN gateway interface. VPN client traffic will be forwarded to this interface. <code>WG_VPN_ALLOWED_IPS</code> <code>--vpn-allowed-ips</code> <code>vpn.allowedIPs</code> <code>0.0.0.0/0, ::/0</code> Allowed IPs that clients may route through this VPN. This will be set in the client's WireGuard connection file and routing is also enforced by the server using iptables. <code>WG_VPN_DISABLE_IPTABLES</code> <code>--vpn-disable-iptables</code> <code>vpn.disableIPTables</code> <code>false</code> Disable iptables configuration completely. When enabled, no iptables rules will be configured (no NAT, no client isolation, no forwarding rules). <code>WG_DNS_ENABLED</code> <code>--[no-]dns-enabled</code> <code>dns.enabled</code> <code>true</code> Enable/disable the embedded DNS proxy server. This is enabled by default and allows VPN clients to avoid DNS leaks by sending all DNS requests to wg-access-server itself. <code>WG_DNS_UPSTREAM</code> <code>--dns-upstream</code> <code>dns.upstream</code> resolvconf autodetection or Cloudflare DNS The upstream DNS servers to proxy DNS requests to. By default the host machine's resolveconf configuration is used to find its upstream DNS server, with a fallback to Cloudflare. <code>WG_DNS_DOMAIN</code> <code>--dns-domain</code> <code>dns.domain</code> A domain to serve configured devices authoritatively. Queries for names in the format .. will be answered with the device's IP addresses. <code>WG_CLIENTCONFIG_DNS_SERVERS</code> <code>--clientconfig-dns-servers</code> <code>clientConfig.dnsServers</code> DNS servers (one or more IP addresses) to write into the client configuration file. Are used instead of the servers DNS settings, if set. <code>WG_CLIENTCONFIG_DNS_SEARCH_DOMAIN</code> <code>--clientconfig-dns-search-domain</code> <code>clientConfig.dnsSearchDomain</code> DNS search domain to write into the client configuration file. <code>WG_CLIENTCONFIG_MTU</code> <code>--clientconfig-mtu</code> <code>clientConfig.mtu</code> The maximum transmission unit (MTU) to write into the client configuration file. If left empty, a sensible default is used. <code>WG_HTTPS_ENABLED</code> <code>--https-enabled</code> <code>https.enabled</code> <code>true</code> Enable HTTPS for the web UI. <code>WG_HTTPS_CERT_FILE</code> <code>--https-cert-file</code> <code>https.certFile</code> Path to the TLS certificate file. If not provided, a self-signed certificate will be generated. <code>WG_HTTPS_KEY_FILE</code> <code>--https-key-file</code> <code>https.keyFile</code> Path to the TLS private key file. If not provided, a self-signed certificate will be generated. <code>WG_HTTPS_PORT</code> <code>--https-port</code> <code>https.port</code> 8443 Port for HTTPS server."},{"location":"2-configuration/#the-config-file-configyaml","title":"The Config File (config.yaml)","text":"<p>Here's an example config file to get started with.</p> <pre><code>loglevel: info\nstorage: sqlite3:///data/db.sqlite3\nwireguard:\n  privateKey: \"&lt;some-key&gt;\"\ndns:\n  upstream:\n    - \"2001:678:e68:f000::\"\n    - \"2001:678:ed0:f000::\"\n    - \"5.1.66.255\"\n    - \"185.150.99.255\"\n</code></pre>"},{"location":"3-storage/","title":"Storage","text":"<p>wg-access-server supports 4 storage backends.</p> Backend Persistent Supports HA Use Case memory \u274c \u274c Local development sqlite3 \u2714\ufe0f \u274c Production - single instance deployments postgres \u2714\ufe0f \u2714\ufe0f Production - multi instance deployments mysql \u2714\ufe0f \u274c Production - single instance deployments"},{"location":"3-storage/#backends","title":"Backends","text":""},{"location":"3-storage/#memory","title":"Memory","text":"<p>This is the default backend if you're running the binary directly and haven't configured another storage backend. Data will be lost between restarts. Handy for development.</p>"},{"location":"3-storage/#sqlite3","title":"SQLite3","text":"<p>This is the default backend if you're running the docker container directly or using docker-compose.</p> <p>The database file will be written to <code>/data/db.sqlite3</code> within the container by default.</p> <p>Sqlite3 is probably the simplest storage backend to get started with because it doesn't require any additional setup to be done. It should work out of the box and should be able to support a large number of users &amp; devices.</p> <p>Example connection string:</p> <ul> <li>Relative path: <code>sqlite3://path/to/db.sqlite3</code></li> <li>Absolute path: <code>sqlite3:///absolute/path/to/db.sqlite3</code></li> </ul>"},{"location":"3-storage/#postgresql","title":"PostgreSQL","text":"<p>This backend requires an external Postgres database to be deployed.</p> <p>Postgres experimentally supports highly-available deployments of wg-access-server and is the recommended storage backend where possible. If you have pgbouncer running in front of PostgreSQL, make sure it is running in \"Session pooling\" mode, as the more aggressive modes like \"Transaction Pooling\" break LISTEN/NOTIFY which we rely on.</p> <p>Example connection string:</p> <ul> <li><code>postgresql://user:password@localhost:5432/database?sslmode=disable</code></li> </ul>"},{"location":"3-storage/#mysql","title":"MySQL","text":"<p>This backend requires an external Mysql database to be deployed. Mysql flavours should be compatible. wg-access-server uses this golang driver if you want to check the compatibility of your favorite flavour.</p> <p>Example connection string:</p> <ul> <li><code>mysql://user:password@localhost:3306/database?ssl-mode=disabled</code></li> </ul>"},{"location":"3-storage/#file-removed","title":"File (removed)","text":"<p>The <code>file://</code> backend was deprecated in 0.3.0 and has been removed in 0.4.0</p> <p>If you'd like to migrate your <code>file://</code> storage to a supported backend you must use version 0.3.0 and then follow the migration guide below to migrate to a different storage backend.</p> <p>Note that the migration tool itself doesn't support the <code>file://</code> backend on versions released after 0.3.0.</p>"},{"location":"3-storage/#migration-between-backends","title":"Migration Between Backends","text":"<p>You can migrate your registered devices between backends using the <code>wg-access-server migrate &lt;src&gt; &lt;dest&gt;</code> command.</p> <p>The migrate command was added in <code>v0.3.0</code> and is provided on a best effort level. As an open source project any community support here is warmly welcomed.</p>"},{"location":"3-storage/#example-file-to-sqlite3","title":"Example: <code>file://</code> to <code>sqlite3://</code>","text":"<p>If you're using the now deprecated <code>file://</code> backend you can migrate to <code>sqlite3://</code> like this:</p> <pre><code># after upgrading to place1/wg-access-server:v0.3.0\ndocker exec -it &lt;container-name&gt; wg-access-server migrate file:///data sqlite3:///data/db.sqlite3\n</code></pre> <p>If you need to do the above within a kubernetes deployment substitute <code>docker exec</code> with the equivalent <code>kubectl exec</code> command.</p> <p>The migrate command is non-destructive but it's always a good idea to take a backup of your data first!</p>"},{"location":"3-storage/#example-sqlite3-to-postgresql","title":"Example: <code>sqlite3://</code> to <code>postgresql://</code>","text":"<p>First you'll need to make sure your postgres server is up and that you can connect to it from your wg-access-server container/pod/vm.</p> <pre><code>wg-access-server migrate sqlite3:///data/db.sqlite3 postgresql://user:password@localhost:5432/database?sslmode=disable\n</code></pre> <p>Remember to update your wg-access-server config to connect to postgres \ud83d\ude00</p>"},{"location":"4-auth/","title":"Authentication","text":"<p>Authentication is pluggable in wg-access-server. Community contributions are welcome for supporting new authentication backends.</p> <p>If you're just getting started you can skip over this section and rely on the default admin account instead.</p> <p>If your authentication system is not yet supported and you aren't quite ready to contribute you could try using a project like dex or SaaS provider like Auth0 which supports a wider variety of authentication protocols. wg-access-server can happily be an OpenID Connect client to a larger solution like this.</p> <p>The following authentication backends are currently supported:</p> Backend Use Case Notes Simple Auth Deployments with a static list of users. Simple and great for self-hosters and home use-cases Recommended, default for the admin account Basic Auth Like Simple Auth, but using HTTP Basic Auth for login Logout does not work because browsers caches Basic Auth credentials OpenID Connect For delegating authentication to an existing identity solution Gitlab For delegating authentication to gitlab. Supports self-hosted Gitlab. <p>If <code>adminPassword</code> is set, an administrator account will be added with the username of <code>adminUsername</code> (default <code>admin</code>) to the Simple Auth or Basic Auth backend; whichever is enabled, automatically enabling Simple if both are unset, preferring Simple to Basic if both are enabled.</p>"},{"location":"4-auth/#configuration","title":"Configuration","text":"<p>Currently authentication providers are only configurable via the wg-access-server config file (config.yaml).</p> <p>Below is an annotated example config section that can be used as a starting point.</p> <pre><code># You can disable the builtin admin account by leaving out 'adminPassword'. Requires another backend to be configured.\nadminPassword: \"&lt;admin password&gt;\"\n# adminUsername sets the user for the Basic/Simple Auth admin account if adminPassword is set.\n# Every user of the basic and simple backend with a username matching adminUsername will have admin privileges.\nadminUsername: \"admin\"\n# Configure zero or more authentication backends\nauth:\n  sessionStore:\n    # 32 random bytes in hexadecimal encoding (64 chars) used to sign session cookies. It's generated randomly\n    # if not present. Need to be set when running in HA setup (more than one replica)\n    secret: \"&lt;session store secret&gt;\"\n  simple:\n    # Users is a list of htpasswd encoded username:password pairs\n    # supports BCrypt, Sha, Ssha, Md5\n    # You can create a user using \"htpasswd -nB &lt;username&gt;\"\n    users: []\n  # HTTP Basic Authentication\n  basic:\n    # Users is a list of htpasswd encoded username:password pairs\n    # supports BCrypt, Sha, Ssha, Md5\n    # You can create a user using \"htpasswd -nB &lt;username&gt;\"\n    users: []\n  oidc:\n    # A name for the backend (is shown on the login page and possibly in the devices list of the 'all devices' admin page)\n    name: \"My OIDC Backend\"\n    # Should point to the OIDC Issuer (excluding /.well-known/openid-configuration)\n    issuer: \"https://identity.example.com\"\n    # Your OIDC client credentials which would be provided by your OIDC provider\n    clientID: \"&lt;client-id&gt;\"\n    clientSecret: \"&lt;client-secret&gt;\"\n    # The full redirect URL\n    # The path can be almost anything as long as it doesn't\n    # conflict with a path that the web UI uses.\n    # /callback is recommended.\n    redirectURL: \"https://wg-access-server.example.com/callback\"\n    # List of scopes to request claims for. Must include 'openid'.\n    # Must include 'email' if 'emailDomains' is used. Can include 'profile' to show the user's name in the UI.\n    # Add custom ones if required for 'claimMapping'.\n    # Defaults to [\"openid\"]\n    scopes:\n      - openid\n      - profile\n      - email\n    # You can optionally restrict access to users with an email address\n    # that matches an allowed domain.\n    # If empty or omitted then all email domains will be allowed.\n    emailDomains:\n      - example.com\n    # This is an advanced feature that allows you to define OIDC claim mapping expressions.\n    # This feature is used to define wg-access-server admins based off a claim in your OIDC token.\n    # A JSON-like object of claimKey: claimValue pairs as returned by the issuer is passed to the evaluation function. \n    # See https://github.com/Knetic/govaluate/blob/9aa49832a739dcd78a5542ff189fb82c3e423116/MANUAL.md for the syntax.\n    claimMapping:\n      # This example works if you have a custom group_membership claim which is a list of strings \n      admin: \"'WireguardAdmins' in group_membership\"\n      access: \"'WireguardAccess' in group_membership\"\n    # Let wg-access-server retrieve the claims from the ID Token instead of querying the UserInfo endpoint.\n    # Some OIDC authorization provider implementations (e.g. ADFS) only publish claims in the ID Token.\n    claimsFromIDToken: false\n    # require this claim to be \"true\" to allow access for the user\n    accessClaim: \"access\"\n  gitlab:\n    name: \"My Gitlab Backend\"\n    baseURL: \"https://mygitlab.example.com\"\n    clientID: \"&lt;client-id&gt;\"\n    clientSecret: \"&lt;client-secret&gt;\"\n    redirectURL: \"https:///wg-access-server.example.com/callback\"\n    emailDomains:\n      - example.com\n</code></pre>"},{"location":"4-auth/#oidc-provider-specifics","title":"OIDC Provider specifics","text":""},{"location":"4-auth/#active-directory-federation-services-adfs","title":"Active Directory Federation Services (ADFS)","text":"<p>Please see this helpful issue comment for instructions for ADFS 2016 and above.</p>"},{"location":"deployment/1-docker/","title":"Docker","text":"<p>Load the <code>ip_tables</code>, <code>ip6_tables</code> and <code>wireguard</code> kernel modules on the host.</p> <pre><code>modprobe ip_tables &amp;&amp; modprobe ip6_tables &amp;&amp; modprobe wireguard\n# Load modules on boot\necho ip_tables &gt;&gt; /etc/modules\necho ip6_tables &gt;&gt; /etc/modules\necho wireguard &gt;&gt; /etc/modules\n</code></pre> <pre><code>docker run \\\n  -it \\\n  --rm \\\n  --cap-add NET_ADMIN \\\n  --device /dev/net/tun:/dev/net/tun \\\n  --sysctl net.ipv6.conf.all.disable_ipv6=0 \\\n  --sysctl net.ipv6.conf.all.forwarding=1 \\\n  -v wg-access-server-data:/data \\\n  -e \"WG_ADMIN_PASSWORD=$WG_ADMIN_PASSWORD\" \\\n  -e \"WG_WIREGUARD_PRIVATE_KEY=$WG_WIREGUARD_PRIVATE_KEY\" \\\n  -p 8000:8000/tcp \\\n  -p 51820:51820/udp \\\n  ghcr.io/freifunkmuc/wg-access-server:latest\n</code></pre>"},{"location":"deployment/1-docker/#modules","title":"Modules","text":"<p>If you are unable to load the <code>iptables</code> kernel modules, you can add the <code>SYS_MODULE</code> capability instead: <code>--cap-add SYS_MODULE</code>. You must also add the following mount: <code>-v /lib/modules:/lib/modules:ro</code>.</p> <p>This is not recommended as it essentially gives the container root privileges over the host system and an attacker could easily break out of the container.</p> <p>The WireGuard module should be loaded automatically, even without <code>SYS_MODULE</code> capability or <code>/lib/modules</code> mount. If it still fails to load, the server automatically falls back to the userspace implementation. </p>"},{"location":"deployment/1-docker/#ipv6-only-without-ipv4","title":"IPv6-only (without IPv4)","text":"<p>If you don't want IPv4 inside the VPN network, set <code>WG_VPN_CIDR=0</code>.</p> <pre><code>docker run \\\n  -it \\\n  --rm \\\n  --cap-add NET_ADMIN \\\n  --device /dev/net/tun:/dev/net/tun \\\n  --sysctl net.ipv6.conf.all.disable_ipv6=0 \\\n  --sysctl net.ipv6.conf.all.forwarding=1 \\\n  -v wg-access-server-data:/data \\\n  -e \"WG_ADMIN_PASSWORD=$WG_ADMIN_PASSWORD\" \\\n  -e \"WG_WIREGUARD_PRIVATE_KEY=$WG_WIREGUARD_PRIVATE_KEY\" \\\n  -e \"WG_VPN_CIDR=0\"\n  -p 8000:8000/tcp \\\n  -p 51820:51820/udp \\\n  ghcr.io/freifunkmuc/wg-access-server:latest\n</code></pre>"},{"location":"deployment/1-docker/#ipv4-only-without-ipv6","title":"IPv4-only (without IPv6)","text":"<p>If you don't want IPv6 inside the VPN network, set <code>WG_VPN_CIDRV6=0</code>. In this case you can also get rid of the sysctls:</p> <pre><code>docker run \\\n  -it \\\n  --rm \\\n  --cap-add NET_ADMIN \\\n  --device /dev/net/tun:/dev/net/tun \\\n  -v wg-access-server-data:/data \\\n  -e \"WG_ADMIN_PASSWORD=$WG_ADMIN_PASSWORD\" \\\n  -e \"WG_WIREGUARD_PRIVATE_KEY=$WG_WIREGUARD_PRIVATE_KEY\" \\\n  -e \"WG_VPN_CIDRV6=0\"\n  -p 8000:8000/tcp \\\n  -p 51820:51820/udp \\\n  ghcr.io/freifunkmuc/wg-access-server:latest\n</code></pre>"},{"location":"deployment/2-docker-compose/","title":"Docker Compose","text":"<p>You can run wg-access-server using the following example Docker Compose file.</p> <p>Checkout the configuration docs to learn how wg-access-server can be configured.</p> <p>Please also read the Docker instructions for general information regarding Docker deployments.</p> <pre><code>version: \"3.0\"\nservices:\n  wg-access-server:\n    # to build the docker image from the source\n    # build:\n    #   dockerfile: Dockerfile\n    #   context: .\n    image: ghcr.io/freifunkmuc/wg-access-server:latest\n    container_name: wg-access-server\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      net.ipv6.conf.all.disable_ipv6: 0\n      net.ipv6.conf.all.forwarding: 1\n    volumes:\n      - \"wg-access-server-data:/data\"\n    #   - \"./config.yaml:/config.yaml\" # if you have a custom config file\n    environment:\n      - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n    export WG_ADMIN_PASSWORD=example\\n}\"\n      - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n    export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\"\n    #  - \"WG_VPN_CIDRV6=0\" # to disable IPv6\n    ports:\n      - \"8000:8000/tcp\"\n      - \"8443:8443/tcp\"\n      - \"51820:51820/udp\"\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n\n# shared volumes with the host\nvolumes:\n  wg-access-server-data:\n    driver: local\n</code></pre>"},{"location":"deployment/2-docker-compose/#with-traefik-as-reverse-proxy-with-letsencrypt","title":"With traefik as Reverse proxy (with LetsEncrypt)","text":"<pre><code>version: \"3.0\"\nservices:\n  wg-access-server:\n    # to build the docker image from the source\n    # build:\n    #   dockerfile: Dockerfile\n    #   context: .\n    image: ghcr.io/freifunkmuc/wg-access-server:latest\n    container_name: wg-access-server\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      net.ipv6.conf.all.disable_ipv6: 0\n      net.ipv6.conf.all.forwarding: 1\n    volumes:\n      - \"wg-access-server-data:/data\"\n    #   - \"./config.yaml:/config.yaml\" # if you have a custom config file\n    environment:\n      - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n    export WG_ADMIN_PASSWORD=example\\n}\"\n      - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n    export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\"\n      - \"WG_HTTPS_ENABLED=false\"\n    #  - \"WG_VPN_CIDRV6=0\" # to disable IPv6\n    expose:\n      - \"8000/tcp\"\n    ports:\n      - \"51820:51820/udp\"\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on: \n      - reverse-proxy\n    labels:\n      - traefik.http.routers.vpn.rule=Host(`vpn.example.com`)\n      - traefik.http.routers.vpn.tls=true\n      - traefik.http.routers.vpn.tls.certresolver=myresolver\n\n  reverse-proxy:\n    # The official v3 Traefik docker image\n    image: traefik:v3\n    command: &gt;\n      --providers.docker\n      --entryPoints.websecure.address=:443\n      --certificatesresolvers.myresolver.acme.email=your-email@example.com\n      --certificatesresolvers.myresolver.acme.storage=letsencrypt/acme.json\n      --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web\n    ports:\n      # The HTTPS port\n      - \"443:443\"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./letsencrypt:/letsencrypt\n\n# shared volumes with the host\nvolumes:\n  wg-access-server-data:\n    driver: local\n</code></pre>"},{"location":"deployment/2-docker-compose/#with-traefik-as-reverse-proxy-with-traefik-self-generated-certificate","title":"With traefik as Reverse proxy (with traefik self generated certificate)","text":"<pre><code>version: \"3.0\"\nservices:\n  wg-access-server:\n    # to build the docker image from the source\n    # build:\n    #   dockerfile: Dockerfile\n    #   context: .\n    image: ghcr.io/freifunkmuc/wg-access-server:latest\n    container_name: wg-access-server\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      net.ipv6.conf.all.disable_ipv6: 0\n      net.ipv6.conf.all.forwarding: 1\n    volumes:\n      - \"wg-access-server-data:/data\"\n    #   - \"./config.yaml:/config.yaml\" # if you have a custom config file\n    environment:\n      - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n    export WG_ADMIN_PASSWORD=example\\n}\"\n      - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n    export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\"\n      - \"WG_HTTPS_ENABLED=false\"\n    #  - \"WG_VPN_CIDRV6=0\" # to disable IPv6\n    expose:\n      - \"8000/tcp\"\n    ports:\n      - \"51820:51820/udp\"\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on: \n      - reverse-proxy\n    labels:\n      - traefik.http.routers.vpn.rule=Host(`vpn.example.com`)\n      - traefik.http.routers.vpn.tls=true\n\n  reverse-proxy:\n    # The official v3 Traefik docker image\n    image: traefik:v3\n    command: &gt;\n      --providers.docker\n      --entryPoints.websecure.address=:443\n    ports:\n      # The HTTPS port\n      - \"443:443\"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n\n# shared volumes with the host\nvolumes:\n  wg-access-server-data:\n    driver: local\n</code></pre> <p>For more Traefik options, take a look here: https://doc.traefik.io/traefik/https/tls/</p>"},{"location":"deployment/2-docker-compose/#ipv6-only-without-ipv4","title":"IPv6-only (without IPv4)","text":"<pre><code>version: \"3.0\"\nservices:\n  wg-access-server:\n    image: ghcr.io/freifunkmuc/wg-access-server:latest\n    container_name: wg-access-server\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      net.ipv6.conf.all.disable_ipv6: 0\n      net.ipv6.conf.all.forwarding: 1\n    volumes:\n      - \"wg-access-server-data:/data\"\n    environment:\n      - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n    export WG_ADMIN_PASSWORD=example\\n}\"\n      - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n    export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\"\n      - \"WG_VPN_CIDR=0\" # to disable IPv4\n    ports:\n      - \"8000:8000/tcp\"\n      - \"8443:8443/tcp\"\n      - \"51820:51820/udp\"\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n\nvolumes:\n  wg-access-server-data:\n    driver: local\n</code></pre>"},{"location":"deployment/2-docker-compose/#ipv4-only-without-ipv6","title":"IPv4-only (without IPv6)","text":"<pre><code>version: \"3.0\"\nservices:\n  wg-access-server:\n    image: ghcr.io/freifunkmuc/wg-access-server:latest\n    container_name: wg-access-server\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - \"wg-access-server-data:/data\"\n    environment:\n      - \"WG_ADMIN_PASSWORD=${WG_ADMIN_PASSWORD:?\\n\\nplease set the WG_ADMIN_PASSWORD environment variable:\\n    export WG_ADMIN_PASSWORD=example\\n}\"\n      - \"WG_WIREGUARD_PRIVATE_KEY=${WG_WIREGUARD_PRIVATE_KEY:?\\n\\nplease set the WG_WIREGUARD_PRIVATE_KEY environment variable:\\n    export WG_WIREGUARD_PRIVATE_KEY=$(wg genkey)\\n}\"\n      - \"WG_VPN_CIDRV6=0\" # to disable IPv6\n    ports:\n      - \"8000:8000/tcp\"\n      - \"8443:8443/tcp\"\n      - \"51820:51820/udp\"\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n\nvolumes:\n  wg-access-server-data:\n    driver: local\n</code></pre>"},{"location":"deployment/3-kubernetes/","title":"Helm Chart","text":"<p>The Helm chart included in this repository has been removed due to lack of expertise on our side and nobody answering our call for aid. If you are a Kubernetes/Helm user, please consider stepping up and taking over maintenance of the chart at https://github.com/freifunkMUC/wg-access-server-chart.</p>"}]}